//THIS IS THE REVIEWS DAPP - REGISTER DATA CONTRACT
//change .txt to .js  AND use node to create

const Dash = require("dash");

const clientOpts = {
  network: "testnet",
  wallet: {
    mnemonic:
      "icon hazard scheme idle write tired age early market badge couch  minimum", //<- CHANGE***
    unsafeOptions: {
      skipSynchronizationBeforeHeight: 1029000, //<- CHANGE***
    },
  },
};

const client = new Dash.Client(clientOpts);

const registerContract = async () => {
  const { platform } = client;
  const identity = await platform.identities.get(
    "BtCcXi8akHVmpb84S9xAPUj7HdyQ4pdEXWCzejvBaxca" //<- CHANGE***
  );

  const contractDocuments = {
    dgrreview: {
      type: "object",
      indices: [
        {
          //This is Reviewer QUERY (For reviews YOU have written)
          name: "ownerIdAndcreatedAt",
          properties: [{ $ownerId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
        {
          //This is personReviewed QUERY (For who reviews are written about)
          name: "toIdandcreatedAt",
          properties: [{ toId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
      ],
      properties: {
        review: {
          type: "string",
          minLength: 0,
          maxLength: 350,
          position: 0,
        },
        rating: {
          type: "integer",
          minimum: 0,
          maximum: 5, //This will be for 0 to 5 stars
          position: 1,
        },
        toId: {
          //This is the personReviewed ownerId
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 2,
        },
      },
      required: ["review", "rating", "toId", "$createdAt", "$updatedAt"],
      additionalProperties: false,
    },

    dgrreply: {
      //The way Reviews works is that only the reviewee makes replies
      type: "object",
      indices: [
        {
          //This is delete query
          name: "ownerIdAndcreatedAt",
          properties: [{ $ownerId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
        {
          name: "reviewId",
          properties: [{ reviewId: "asc" }],
          unique: false,
        },
      ],
      properties: {
        reply: {
          type: "string",
          minLength: 0,
          maxLength: 350,
          position: 0,
        },
        reviewId: {
          //this is the review doc Id
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 1,
        },
      },
      required: ["reply", "reviewId", "$createdAt", "$updatedAt"],
      additionalProperties: false,
    },
  };

  const contract = await platform.contracts.create(contractDocuments, identity);
  console.dir({ contract: contract.toJSON() });

  await platform.contracts.publish(contract, identity);
  return contract;
};

registerContract()
  .then((d) => console.log("Contract registered:\n", d.toJSON()))
  .catch((e) => console.error("Something went wrong:\n", e))
  .finally(() => client.disconnect());
