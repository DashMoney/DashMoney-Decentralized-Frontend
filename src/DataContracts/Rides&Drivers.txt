//THIS IS THE Rides&Drivers - REGISTER DATA CONTRACT

const Dash = require("dash");

const clientOpts = {
  network: "testnet",
  wallet: {
    mnemonic:
      "icon hazard scheme idle write tired age early market badge couch  minimum",
    unsafeOptions: {
      skipSynchronizationBeforeHeight: 1029000, //<- CHANGE*********
    },
  },
};

const client = new Dash.Client(clientOpts);

const registerContract = async () => {
  const { platform } = client;
  const identity = await platform.identities.get(
    "HJdBggCvcU5F4FEwP9zvTvZiXzEbcJV9YyUPLbNdTeXV"
  );

  const contractDocuments = {
    rideReq: {
      //rideRequest
      type: "object",
      indices: [
        {
          name: "reqTime",
          properties: [{ reqTime: "asc" }],
          unique: false,
        },
        {
          name: "cityreqTime",
          properties: [{ city: "asc" }, { reqTime: "asc" }],
          unique: false,
        },
        {
          name: "regionreqTime", //reg is region for region or province, etc
          properties: [{ region: "asc" }, { reqTime: "asc" }],
          unique: false,
        },
        {
          name: "cityregionreqTime",
          properties: [{ city: "asc" }, { region: "asc" }, { reqTime: "asc" }],
          unique: false,
        },

        {
          //This is the FIND YOUR POSTS
          name: "ownerIdAndupdatedAt",
          properties: [{ $ownerId: "asc" }, { $updatedAt: "asc" }],
          unique: false,
        },
      ],

      properties: {
        area: {
          // neighborhood, NorthSide, Downtown,
          //city
          type: "string",
          minLength: 0,
          maxLength: 36,
          position: 0,
        },
        city: {
          //region
          type: "string",
          minLength: 0,
          maxLength: 36,
          position: 1,
        },
        region: {
          // country or State or province
          type: "string",
          minLength: 0,
          maxLength: 36,
          position: 2,
        },

        pickupAddr: {
          type: "string",
          minLength: 0,
          maxLength: 250,
          position: 3,
        },

        dropoffAddr: {
          type: "string",
          minLength: 0,
          maxLength: 250,
          position: 4,
        },

        timeEst: {
          type: "integer",
          minimum: 0,
          maximum: 99999,
          position: 5,
        },

        distEst: {
          type: "string",
          minLength: 0,
          maxLength: 32,

          position: 6,
        },

        pmtType: {
          type: "integer",
          minimum: 0,
          maximum: 999999,
          position: 7,
        },

        amt: {
          type: "integer",
          minimum: 0,
          maximum: 100000000000, // 1,000 Dash is max
          position: 8,
        },

        reqTime: {
          type: "integer",
          minimum: 0,
          maximum: 99999999999999,
          position: 9,
        },

        numOfRiders: {
          type: "integer",
          minimum: 0,
          maximum: 1000000,
          position: 10,
        },

        extraInstr: {
          type: "string",
          minLength: 0,
          maxLength: 450,
          position: 11,
        },

        replyId: {
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 12,
        },
        toId: {
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 13,
        },

        txId1: {
          type: "string",
          minLength: 0,
          maxLength: 64,
          position: 14,
        },
        txId2: {
          type: "string",
          minLength: 0,
          maxLength: 64,
          position: 15,
        },
      },
      required: [
        "area", //can just be ''
        "city",
        "region",

        "pickupAddr",
        "dropoffAddr",

        "timeEst",

        "distEst",

        "pmtType", //OnPickup, OnDropoff
        "amt",

        "reqTime", //DATE.now()
        "numOfRiders",
        "extraInstr",

        "replyId",

        "$updatedAt",
      ],
      additionalProperties: false,
    },
    rideReply: {
      type: "object",
      indices: [
        {
          name: "reqIdAndcreatedAt", //Make ascending order
          properties: [{ reqId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
        {
          name: "ownerIdAndcreatedAt",
          properties: [{ $ownerId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
      ],
      properties: {
        amt: {
          type: "integer",
          minimum: 0,
          maximum: 100000000000, // 1,000 Dash is max
          position: 0,
        },
        toId: {
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 1,
        },

        reqId: {
          // this is the "msgId"
          //This is for enabling the response capability!!

          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 2,
        },
        msg: {
          type: "string",
          minLength: 0,
          maxLength: 450,
          position: 3,
        },
      },
      required: ["amt", "reqId", "$createdAt", "$updatedAt"],
      additionalProperties: false,
    },
  };

  const contract = await platform.contracts.create(contractDocuments, identity);
  console.dir({ contract: contract.toJSON() });

  await platform.contracts.publish(contract, identity);
  return contract;
};

registerContract()
  .then((d) => console.log("Contract registered:\n", d.toJSON()))
  .catch((e) => console.error("Something went wrong:\n", e))
  .finally(() => client.disconnect());
