//THIS IS THE WALLET DAPP - REGISTER DATA CONTRACT - notimeStamp
//change .txt to .js  AND use node to create

const Dash = require("dash");

const clientOpts = {
  network: "testnet",
  wallet: {
    mnemonic:
      "icon hazard scheme idle write tired age early market badge couch  minimum", //<- CHANGE***
    unsafeOptions: {
      skipSynchronizationBeforeHeight: 1029000, //<- CHANGE***
    },
  },
};

const client = new Dash.Client(clientOpts);

const registerContract = async () => {
  const { platform } = client;
  const identity = await platform.identities.get(
    "BtCcXi8akHVmpb84S9xAPUj7HdyQ4pdEXWCzejvBaxca" //<- CHANGE***
  );

  const contractDocuments = {
    dgmaddress: {
      type: "object",
      indices: [
        {
          name: "ownerId",
          properties: [{ $ownerId: "asc" }],
          unique: true,
        },
        {
          name: "address",
          properties: [{ address: "asc" }],
          unique: true,
        },
      ],
      properties: {
        address: {
          type: "string",
          minLength: 34,
          maxLength: 34,
          position: 0,
        },
      },
      required: ["address"],
      additionalProperties: false,
    },

    dgmmsg: {
      //and Request Pmt
      type: "object",
      indices: [
        {
          //This is Sender QUERY
          name: "ownerIdAndcreatedAt",
          properties: [{ $ownerId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
        {
          //This is Receipient QUERY
          name: "toIdandcreatedAt",
          properties: [{ toId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
      ],
      properties: {
        msg: {
          type: "string",
          minLength: 0,
          maxLength: 250,
          position: 0,
        },

        toId: {
          //This is the Receipient ownerId
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 1,
        },
        txId: {
          //THIS MAKES IT A PAYMENT or SIGNAL 'REQUEST'
          type: "string",
          minLength: 0,
          maxLength: 64,
          position: 2,
        },

        amt: {
          //THIS MAKES IS A REQUEST

          type: "integer",
          minimum: 0,
          maximum: 10000000000000, // 100,000 Dash is max
          position: 3,
        },
      },
      required: ["toId", "$createdAt", "$updatedAt"],
      additionalProperties: false,
    },

    dgmthr: {
      type: "object",
      indices: [
        {
          //This is Sender QUERY
          name: "ownerIdAndcreatedAt",
          properties: [{ $ownerId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
        {
          name: "msgIdandcreatedAt",
          properties: [{ msgId: "asc" }, { $createdAt: "asc" }],
          unique: false,
        },
      ],
      properties: {
        msg: {
          type: "string",
          minLength: 0,
          maxLength: 250,
          position: 0,
        },
        msgId: {
          //reqId
          //this is the msg doc Id
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 1,
        },
        toId: {
          //TAGS THE OWNER SO IF DELETE PMT REQUEST  //MEANS ACCEPTED
          //This is the ORDER ownerId
          type: "array",
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: "application/x.dash.dpp.identifier",
          position: 2,
        },
        txId: {
          //THIS MAKES IS A PAYMENT/ Requested pmt OR DECLINE PMT
          type: "string",
          minLength: 0,
          maxLength: 64,
          position: 3,
        },
      },
      required: ["msg", "msgId", "$createdAt", "$updatedAt"],
      additionalProperties: false,
    },
  };

  const contract = await platform.contracts.create(contractDocuments, identity);
  console.dir({ contract: contract.toJSON() });

  await platform.contracts.publish(contract, identity);
  return contract;
};

registerContract()
  .then((d) => console.log("Contract registered:\n", d.toJSON()))
  .catch((e) => console.error("Something went wrong:\n", e))
  .finally(() => client.disconnect());
